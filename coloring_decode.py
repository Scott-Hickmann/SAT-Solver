import numpy as np
from pysat.formula import CNF

from coloring_utils import graph, parse_solution_variable

solution = [-1, 2, -3, -4, 5, -6, -7, 8, -9, -10, 11, -12, 13, -14, 15, -16, 17, -18, -19, -20, -21, -22] # Valid
solution = [-1, 2, 3, -4, -5, -6, -7, 8, 9, -10, -11, -12, -13, 14, 15, -16, -17, -18, 19, -20, 21, -22] # Valid
solution = [-1, 2, 3, -4, -5, -6, 7, 8, 9, -10, -11, -12, 13, 14, 15, -16, 17, -18, -19, -20, -21, -22] # Valid
solution = [1, -2, -3, -4, 5, 6, 7, -8, -9, -10, 11, 12, -13, 14, -15, -16, -17, 18, 19, 20, 21, 22] # Valid
solution = [-1, 2, 3, 4, -5, -6, -7, 8, 9, 10, -11, -12, -13, 14, -15, 16, -17, 18, 19, 20, 21, 22] # Valid
solution = [1, -2, -3, -4, -5, 6, 7, -8, -9, -10, 11, 12, -13, 14, -15, 16, -17, -18, 19, 20, 21, 22] # Valid
solution = [1, 2, 3, -4, -5, 6, 7, 8, 9, -10, -11, 12, 13, -14, 15, -16, 17, -18, -19, -20, -21, -22] # Valid
solution = [1, 2, 3, -4, -5, 6, 7, 8, 9, -10, -11, -12, 13, -14, 15, 16, 17, -18, -19, -20, -21, -22] # Valid
solution = [-1, 2, 3, 4, -5, -6, -7, 8, 9, 10, 11, -12, -13, 14, -15, -16, -17, 18, 19, 20, 21, 22] # Valid
solution = [-1, -2, 3, -4, 5, 6, -7, -8, 9, -10, 11, 12, -13, -14, -15, 16, -17, 18, -19, 20, -21, 22] # Valid
solution = [1, 2, -3, 4, -5, 6, -7, 8, 9, 10, 11, -12, -13, 14, -15, -16, -17, 18, 19, -20, 21, 22, -23, -24, -25, 26, -27, 28, 29, 30, -31, -32, -33, 34, -35, 36, -37, -38, 39, 40, 41, -42, 43, -44, -45, 46, 47, -48, -49, -50, 51, 52, 53, -54, -55, -56, 57, 58, 59, 60, -61, -62, 63, 64, -65, -66, 67, -68, 69, -70, 71, 72, 73, 74, -75, -76, -77, -78, -79, -80, -81, 82, -83, 84, 85, -86, 87, -88, 89, 90, 91, 92, -93, 94, 95, -96, -97, -98, -99, -100, -101, -102, 103, 104, -105, -106, 107, 108, 109, -110, -111, 112, 113, -114, 115, 116, 117, -118, 119, 120, 121, -122, 123, -124, 125, 126, -127, -128, 129, 130, -131, 132, -133, -134, 135, 136, 137, -138, 139, -140, 141, 142, -143, -144, 145, 146, 147, 148, -149, 150, 151, 152, -153, 154, -155, 156, 157, -158, 159, -160, -161, 162, -163, 164, -165, 166, -167, -168, 169, 170, 171, -172, -173, 174, -175, -176, -177, 178, 179, -180, -181, 182, 183, -184, 185, 186, -187, -188, 189, -190, 191, -192, -193, -194, 195, 196, -197, -198, -199, -200, -201, 202, -203, -204, -205, 206, 207, -208, 209, 210, 211, -212, 213] # odeint 1s 1000res (invalid)
solution = [1, 2, -3, 4, -5, 6, -7, -8, 9, 10, -11, 12, -13, 14, -15, -16, 17, 18, 19, -20, 21, 22, -23, -24, 25, 26, -27, 28, 29, -30, -31, -32, -33, -34, -35, 36, -37, -38, 39, 40, -41, 42, 43, -44, -45, 46, 47, -48, -49, -50, 51, 52, 53, -54, -55, -56, 57, 58, 59, -60, -61, -62, -63, 64, -65, -66, 67, -68, 69, -70, 71, 72, 73, 74, -75, -76, -77, -78, -79, -80, -81, 82, -83, 84, 85, -86, 87, -88, 89, 90, 91, 92, -93, 94, 95, -96, -97, -98, 99, -100, -101, -102, 103, 104, -105, -106, -107, 108, 109, -110, -111, 112, 113, -114, 115, 116, -117, -118, 119, 120, 121, 122, -123, 124, -125, -126, 127, -128, 129, 130, 131, 132, -133, -134, 135, 136, 137, -138, 139, 140, 141, -142, 143, -144, -145, 146, 147, 148, -149, 150, 151, -152, -153, -154, -155, 156, 157, -158, -159, -160, -161, 162, -163, 164, -165, 166, -167, -168, 169, 170, 171, -172, 173, -174, 175, -176, -177, 178, 179, -180, -181, -182, 183, -184, 185, 186, 187, -188, 189, -190, 191, -192, 193, -194, 195, 196, 197, -198, -199, -200, -201, 202, -203, -204, -205, 206, 207, -208, -209, 210, 211, -212, 213] # Euler 2s 1000res (invalid)
solution = [1, 2, -3, 4, -5, 6, -7, 8, 9, 10, 11, -12, -13, 14, -15, -16, -17, 18, 19, -20, 21, 22, -23, -24, -25, 26, -27, 28, 29, 30, -31, -32, -33, 34, -35, 36, -37, -38, 39, 40, 41, -42, 43, -44, -45, 46, 47, -48, -49, -50, 51, 52, 53, -54, -55, -56, 57, 58, 59, 60, -61, -62, 63, 64, -65, -66, 67, -68, 69, -70, 71, 72, 73, 74, -75, -76, -77, -78, -79, -80, -81, 82, -83, 84, 85, -86, 87, -88, 89, 90, 91, 92, -93, 94, 95, -96, -97, -98, -99, -100, -101, -102, 103, 104, -105, -106, 107, 108, 109, -110, -111, 112, 113, -114, 115, 116, 117, -118, 119, 120, 121, -122, 123, -124, 125, 126, -127, -128, 129, 130, -131, 132, -133, -134, 135, 136, 137, -138, 139, -140, 141, 142, -143, -144, 145, 146, 147, 148, -149, 150, 151, 152, -153, 154, -155, 156, 157, -158, 159, -160, -161, 162, -163, 164, -165, 166, -167, -168, 169, 170, 171, -172, -173, 174, -175, -176, -177, 178, 179, -180, -181, 182, 183, -184, 185, 186, -187, -188, 189, -190, 191, -192, -193, -194, 195, 196, -197, -198, -199, -200, -201, 202, -203, -204, -205, 206, 207, -208, 209, 210, 211, -212, 213] # Euler 1s 1000res (invalid)
solution = [1, 2, -3, 4, -5, 6, -7, 8, 9, 10, 11, -12, -13, 14, -15, -16, 17, 18, 19, -20, 21, 22, -23, -24, 25, -26, -27, 28, 29, 30, -31, -32, -33, 34, -35, 36, -37, -38, 39, 40, -41, 42, 43, -44, -45, 46, 47, 48, -49, -50, 51, 52, 53, 54, -55, -56, 57, -58, 59, 60, -61, -62, -63, 64, -65, -66, 67, -68, 69, -70, 71, 72, 73, 74, -75, -76, -77, -78, -79, -80, -81, 82, -83, 84, 85, -86, 87, -88, 89, 90, 91, 92, -93, 94, 95, -96, -97, -98, 99, -100, -101, -102, 103, 104, -105, -106, -107, 108, 109, -110, -111, 112, 113, -114, 115, 116, 117, -118, 119, 120, 121, -122, 123, -124, 125, 126, -127, -128, 129, 130, 131, 132, -133, -134, 135, 136, 137, -138, 139, 140, 141, -142, 143, -144, -145, -146, 147, 148, -149, 150, 151, -152, -153, -154, -155, 156, 157, -158, 159, -160, -161, 162, -163, 164, -165, 166, -167, -168, 169, 170, 171, -172, 173, -174, 175, -176, -177, 178, 179, -180, -181, -182, 183, -184, 185, 186, -187, -188, 189, -190, 191, -192, -193, -194, 195, 196, 197, -198, -199, -200, -201, 202, -203, -204, -205, 206, 207, -208, -209, 210, 211, -212, 213] # odeint 2s 1000res (valid)
solution = [1, 2, -3, 4, -5, 6, -7, 8, 9, 10, 11, -12, -13, 14, -15, -16, 17, 18, 19, -20, 21, 22, -23, -24, 25, -26, -27, 28, 29, 30, -31, -32, -33, 34, -35, 36, -37, -38, 39, 40, -41, 42, 43, -44, -45, 46, 47, 48, -49, -50, 51, 52, 53, 54, -55, -56, 57, -58, 59, 60, -61, -62, -63, 64, -65, -66, 67, -68, 69, -70, 71, 72, 73, 74, -75, -76, -77, -78, -79, -80, -81, 82, -83, 84, 85, -86, 87, -88, 89, 90, 91, 92, -93, 94, 95, -96, -97, -98, 99, -100, -101, -102, 103, 104, -105, -106, -107, 108, 109, -110, -111, 112, 113, -114, 115, 116, 117, -118, 119, 120, 121, -122, 123, -124, 125, 126, -127, -128, 129, 130, 131, 132, -133, -134, 135, 136, 137, -138, 139, 140, 141, -142, 143, -144, -145, -146, 147, 148, -149, 150, 151, -152, -153, -154, -155, 156, 157, -158, 159, -160, -161, 162, -163, 164, -165, 166, -167, -168, 169, 170, 171, -172, 173, -174, 175, -176, -177, 178, 179, -180, -181, -182, 183, -184, 185, 186, -187, -188, 189, -190, 191, -192, -193, -194, 195, 196, 197, -198, -199, -200, -201, 202, -203, -204, -205, 206, 207, -208, -209, 210, 211, -212, 213]

color_sets = [set() for _ in range(4)]

for node in range(graph.shape[0]):
    node, color_index = parse_solution_variable(node, solution)
    color_sets[color_index].add(node)

index_to_name_mapping = {'AK': 0, 'AL': 1, 'AR': 2, 'AZ': 3, 'CA': 4, 'CO': 5, 'CT': 6, 'DC': 7, 'DE': 8, 'FL': 9, 'GA': 10, 'HI': 11, 'IA': 12, 'ID': 13, 'IL': 14, 'IN': 15, 'KS': 16, 'KY': 17, 'LA': 18, 'MA': 19, 'MD': 20, 'ME': 21, 'MI': 22, 'MN': 23, 'MO': 24, 'MS': 25, 'MT': 26, 'NC': 27, 'ND': 28, 'NE': 29, 'NH': 30, 'NJ': 31, 'NM': 32, 'NV': 33, 'NY': 34, 'OH': 35, 'OK': 36, 'OR': 37, 'PA': 38, 'RI': 39, 'SC': 40, 'SD': 41, 'TN': 42, 'TX': 43, 'UT': 44, 'VA': 45, 'VT': 46, 'WA': 47, 'WI': 48, 'WV': 49, 'WY': 50}
name_to_index_mapping = {v: k for k, v in index_to_name_mapping.items()}

# print("Color sets", [set([chr(65 + number) for number in color_set]) for color_set in color_sets if len(color_set) > 0])
print("Color sets", [set([name_to_index_mapping[number] for number in color_set]) for color_set in color_sets if len(color_set) > 0])

def verify_graph(color_sets):
    for color_set in color_sets:
        for node in color_set:
            for neighbor in color_set:
                if graph[node][neighbor] != 0:
                    print(f"Invalid graph, conflict between {chr(65 + node)} and {chr(65 + neighbor)}.")
                    return False
    return True

print(verify_graph(color_sets))